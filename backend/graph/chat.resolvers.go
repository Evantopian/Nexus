package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.68

import (
	"context"
	"fmt"

	"github.com/Evantopian/Nexus/graph/model"
	"github.com/google/uuid"
	"github.com/Evantopian/Nexus/graph/resolver/chat"

)

// SendMessage is the resolver for the sendMessage field.
func (r *mutationResolver) SendMessage(ctx context.Context, conversationID uuid.UUID, body string) (*model.Message, error) {
	return chat.SendMessage(ctx, conversationID, body)

}

// EditMessage is the resolver for the editMessage field.
func (r *mutationResolver) EditMessage(ctx context.Context, messageID uuid.UUID, body string) (*model.Message, error) {
	return chat.EditMessage(ctx, messageID, body)

}

// DeleteMessage is the resolver for the deleteMessage field.
func (r *mutationResolver) DeleteMessage(ctx context.Context, messageID uuid.UUID) (bool, error) {
	return chat.DeleteMessage(ctx, messageID)
}


// StartConversation is the resolver for the startConversation field.
func (r *mutationResolver) StartConversation(ctx context.Context, participantIds []uuid.UUID) (*model.Conversation, error) {
	return chat.StartConversation(ctx, participantIds)
}

// CreateServer is the resolver for the createServer field.
func (r *mutationResolver) CreateServer(ctx context.Context, name string) (*model.Server, error) {
	return chat.CreateServer(ctx, name)
}

// JoinServer is the resolver for the joinServer field.
func (r *mutationResolver) JoinServer(ctx context.Context, serverID uuid.UUID) (bool, error) {
	return chat.JoinServer(ctx, serverID)
}

// LeaveServer is the resolver for the leaveServer field.
func (r *mutationResolver) LeaveServer(ctx context.Context, serverID uuid.UUID) (bool, error) {
	return chat.LeaveServer(ctx, serverID)
}

// DeleteServer is the resolver for the deleteServer field.
func (r *mutationResolver) DeleteServer(ctx context.Context, serverID uuid.UUID) (bool, error) {
	return chat.DeleteServer(ctx, serverID)
}

// CreateChannel is the resolver for the createChannel field.
func (r *mutationResolver) CreateChannel(ctx context.Context, serverID uuid.UUID, name string, typeArg model.ChannelType, categoryID *uuid.UUID) (*model.Channel, error) {
	panic(fmt.Errorf("not implemented: CreateChannel - createChannel"))
}

// DeleteChannel is the resolver for the deleteChannel field.
func (r *mutationResolver) DeleteChannel(ctx context.Context, channelID uuid.UUID) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteChannel - deleteChannel"))
}

// LeaveChannel is the resolver for the leaveChannel field.
func (r *mutationResolver) LeaveChannel(ctx context.Context, channelID uuid.UUID) (bool, error) {
	panic(fmt.Errorf("not implemented: LeaveChannel - leaveChannel"))
}

// PinMessage is the resolver for the pinMessage field.
func (r *mutationResolver) PinMessage(ctx context.Context, messageID uuid.UUID) (bool, error) {
	panic(fmt.Errorf("not implemented: PinMessage - pinMessage"))
}

// UnpinMessage is the resolver for the unpinMessage field.
func (r *mutationResolver) UnpinMessage(ctx context.Context, messageID uuid.UUID) (bool, error) {
	panic(fmt.Errorf("not implemented: UnpinMessage - unpinMessage"))
}

// SendChannelMessage is the resolver for the sendChannelMessage field.
func (r *mutationResolver) SendChannelMessage(ctx context.Context, channelID uuid.UUID, body string) (*model.Message, error) {
	panic(fmt.Errorf("not implemented: SendChannelMessage - sendChannelMessage"))
}

// AssignRole is the resolver for the assignRole field.
func (r *mutationResolver) AssignRole(ctx context.Context, userID uuid.UUID, serverID uuid.UUID, roleID uuid.UUID) (bool, error) {
	panic(fmt.Errorf("not implemented: AssignRole - assignRole"))
}

// CreateRole is the resolver for the createRole field.
func (r *mutationResolver) CreateRole(ctx context.Context, serverID uuid.UUID, name string, permissions []string) (*model.Role, error) {
	panic(fmt.Errorf("not implemented: CreateRole - createRole"))
}

// DeleteRole is the resolver for the deleteRole field.
func (r *mutationResolver) DeleteRole(ctx context.Context, roleID uuid.UUID) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteRole - deleteRole"))
}

// GetConversations is the resolver for the getConversations field.
func (r *queryResolver) GetConversations(ctx context.Context) ([]*model.Conversation, error) {
	return chat.GetConversations(ctx)
}

// GetMessages is the resolver for the getMessages field.
func (r *queryResolver) GetMessages(ctx context.Context, conversationID uuid.UUID) ([]*model.Message, error) {
	panic(fmt.Errorf("not implemented: GetMessages - getMessages"))
}

// GetServers is the resolver for the getServers field.
func (r *queryResolver) GetServers(ctx context.Context) ([]*model.Server, error) {
	return chat.GetServers(ctx)
}

// GetServer is the resolver for the getServer field.
func (r *queryResolver) GetServer(ctx context.Context, id uuid.UUID) (*model.Server, error) {
	return chat.GetServer(ctx, id)
}

// GetChannels is the resolver for the getChannels field.
func (r *queryResolver) GetChannels(ctx context.Context, serverID uuid.UUID) ([]*model.Channel, error) {
	panic(fmt.Errorf("not implemented: GetChannels - getChannels"))
}

// GetChannelMessages is the resolver for the getChannelMessages field.
func (r *queryResolver) GetChannelMessages(ctx context.Context, channelID uuid.UUID) ([]*model.Message, error) {
	panic(fmt.Errorf("not implemented: GetChannelMessages - getChannelMessages"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }

# Custom UUID Scalar type
scalar UUID

# Enum for Playstyle
enum Playstyle {
  COMPETITIVE
  CASUAL
}

# Enum for Platform (e.g., PC, Console, Mobile)
enum Platform {
  PC
  CONSOLE
  MOBILE
}

# Enum for Game Genre (e.g., RPG, FPS)
enum GameGenre {
  RPG
  FPS
  MOBA
  STRATEGY
  ACTION
  ADVENTURE
  SIMULATION
}

# Define the User type
type User {
  uuid: UUID! # Unique identifier for the user (UUID)
  email: String! # User's email address
  username: String! # User's unique username
  password: String! # User's password (stored securely, should be hashed)
  profileImg: String # URL or path to the user's profile image
  profileMessage: String # A short bio or status message for the user
  status: String # e.g., "online", "offline", "busy"
  reputation: Int! # Player's reputation (starts at 0, can go negative)
  rank: String # User's rank (optional)
  createdAt: String # Account creation time (formatted as a string)
  age: Int # User's age
  preferences: Preferences # User's game preferences
  followingGames: [Game!]! # List of games the user is following
}

# Define the Preferences type
type Preferences {
  region: String # User's preferred region (e.g., "NA", "EU")
  playstyle: Playstyle # User's playstyle (Competitive, Casual, etc.)
  favoritePlatform: Platform # User's favorite platform (PC, Console, Mobile)
  favoriteGameGenre: GameGenre # User's favorite game genre (e.g., RPG, FPS)
}

type UserRecommendation {
  uuid: UUID!
  email: String
  username: String
  profileImg: String
  region: String
  genre: String
  platform: String
  playstyle: String
  rank: String
  reputation: Int
  age: Int
}

# Root Query type (Protected Query)
extend type Query {
  profile: User! # Get the user's profile
  getUser(userId: UUID!): User!
  getRandomUsers: [User!]!
  getRecommendations(
    userId: UUID!
    numRecommendations: Int!
  ): [UserRecommendation!]!

  searchUser(search: String!): [User!]!

  getUserFollowedGames(userId: UUID!): [Game!]!
  isUserFollowingGame(userId: UUID!, gameId: UUID!): Boolean!
}

# Root Mutation type (Protected User Management)
extend type Mutation {
  updateUser(
    username: String
    email: String
    password: String
    profileImg: String
    profileMessage: String
    status: String
    rank: String
    age: Int
  ): User!

  deleteUser: Boolean! # Delete the user and their related data (friends, friend requests)
  adjustRep(userId: UUID!, amount: Int!): Boolean!

  updatePreference(
    region: String
    playstyle: Playstyle
    favoritePlatform: Platform
    favoriteGameGenre: GameGenre
  ): User!

  # Add a game to the user's follow list
  followGame(slug: String!): Boolean!

  # Remove a game from the user's follow list
  unfollowGame(slug: String!): Boolean!
}
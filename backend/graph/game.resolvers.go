package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.68

import (
	"context"

	"github.com/Evantopian/Nexus/graph/model"
	"github.com/Evantopian/Nexus/graph/resolver"
	"github.com/google/uuid"
)

// CreateGame is the resolver for the createGame field.
func (r *mutationResolver) CreateGame(ctx context.Context, slug string, title string, description *string, shortDescription *string, image *string, banner *string, logo *string, players *string, releaseDate *string, developer *string, publisher *string, platforms []string, tags []string, rating *float64) (*model.Game, error) {
	return resolver.CreateGame(ctx, slug, title, description, shortDescription, image, banner, logo, players, releaseDate, developer, publisher, platforms, tags, rating)
}

// UpdateGame is the resolver for the updateGame field.
func (r *mutationResolver) UpdateGame(ctx context.Context, slug string, title string, description *string, shortDescription *string, image *string, banner *string, logo *string, players *string, releaseDate *string, developer *string, publisher *string, platforms []string, tags []string, rating *float64) (*model.Game, error) {
	return resolver.UpdateGame(ctx, slug, title, description, shortDescription, image, banner, logo, players, releaseDate, developer, publisher, platforms, tags, rating)
}

// FollowGame is the resolver for the followGame field.
func (r *mutationResolver) FollowGame(ctx context.Context, slug string) (bool, error) {
	return resolver.FollowGame(ctx, slug)
}

// UnfollowGame is the resolver for the unfollowGame field.
func (r *mutationResolver) UnfollowGame(ctx context.Context, slug string) (bool, error) {
	return resolver.UnfollowGame(ctx, slug)
}

// DeleteGame is the resolver for the deleteGame field.
func (r *mutationResolver) DeleteGame(ctx context.Context, slug string) (bool, error) {
	return resolver.DeleteGame(ctx, slug)
}

// GetGame is the resolver for the getGame field.
func (r *queryResolver) GetGame(ctx context.Context, slug string) (*model.Game, error) {
	return resolver.GetGame(ctx, slug)
}

// GetUserFollowedGames is the resolver for the getUserFollowedGames field.
func (r *queryResolver) GetUserFollowedGames(ctx context.Context, userID uuid.UUID) ([]*model.Game, error) {
	return resolver.GetUserFollowedGames(ctx, userID)
}

// IsUserFollowingGame is the resolver for the isUserFollowingGame field.
func (r *queryResolver) IsUserFollowingGame(ctx context.Context, userID uuid.UUID, gameID uuid.UUID) (bool, error) {
	return resolver.IsUserFollowingGame(ctx, userID, gameID)
}

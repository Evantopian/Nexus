package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.66

import (
	"context"

	"github.com/Evantopian/Nexus/graph/model"
	"github.com/Evantopian/Nexus/graph/resolver"
	"github.com/google/uuid"
)

// CreateLFGPost is the resolver for the createLFGPost field.
func (r *mutationResolver) CreateLFGPost(ctx context.Context, gameID uuid.UUID, title string, description string, requirements []string, tags []string, expirationHour *int32) (*model.LFGPost, error) {
	var expire int
	if expirationHour != nil {
		expire = int(*expirationHour)
	} else {
		expire = 12 // Set a default value (e.g., 24 hours)
	}

	return resolver.CreateLFGPost(ctx, gameID, title, description, requirements, tags, expire)
}

// UpdateLFGPost is the resolver for the updateLFGPost field.
func (r *mutationResolver) UpdateLFGPost(ctx context.Context, postID uuid.UUID, title string, description string, requirements []string, tags []string, expirationHour *int32) (*model.LFGPost, error) {
	var expire int
	if expirationHour != nil {
		expire = int(*expirationHour)
	} else {
		expire = 12 // Set a default value (e.g., 24 hours)
	}

	return resolver.UpdateLFGPost(ctx, postID, title, description, requirements, tags, expire)
}

// DeleteLFGPost is the resolver for the deleteLFGPost field.
func (r *mutationResolver) DeleteLFGPost(ctx context.Context, postID uuid.UUID) (bool, error) {
	return resolver.DeleteLFGPost(ctx, postID)
}

// GetLFGPosts is the resolver for the getLFGPosts field.
func (r *queryResolver) GetLFGPosts(ctx context.Context, slug string) ([]*model.LFGPost, error) {
	return resolver.GetLFGPosts(ctx, slug)
}

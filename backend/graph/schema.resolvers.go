package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.66

import (
	"context"
	"fmt"

	"github.com/Evantopian/Nexus/graph/model"
	"github.com/Evantopian/Nexus/graph/resolver"
)

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, username *string, email *string, password *string, profileImg *string, profileMessage *string, status *string, rank *string) (*model.User, error) {
	return resolver.UpdateUser(ctx, username, email, password, profileImg, profileMessage, status, rank)
}

// DeleteUser is the resolver for the deleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context) (bool, error) {
	return resolver.DeleteUser(ctx)
}

// AdjustRep is the resolver for the adjustRep field.
func (r *mutationResolver) AdjustRep(ctx context.Context, amount int32) (bool, error) {
	return resolver.AdjustRep(ctx, int(amount))
}

// UpdatePreference is the resolver for the updatePreference field.
func (r *mutationResolver) UpdatePreference(ctx context.Context, region *string, playstyle *model.Playstyle) (*model.Preferences, error) {
	return resolver.UpdatePreference(ctx, region, playstyle)
}

// Profile is the resolver for the profile field.
func (r *queryResolver) Profile(ctx context.Context) (*model.User, error) {
	return resolver.Profile(ctx)
}

// GetGame is the resolver for the getGame field.
func (r *queryResolver) GetGame(ctx context.Context, slug string) (*model.Game, error) {
	panic(fmt.Errorf("not implemented: GetGame - getGame"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }

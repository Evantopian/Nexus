package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.68

import (
	"context"
	"fmt"

	"github.com/Evantopian/Nexus/graph/model"
	"github.com/Evantopian/Nexus/graph/resolver"
	"github.com/google/uuid"
)

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, username *string, email *string, password *string, profileImg *string, profileMessage *string, status *string, rank *string, age *int32) (*model.User, error) {
	var ageInt32 *int32
	if age != nil {
		convertedAge := int32(*age) // Convert int to int32
		ageInt32 = &convertedAge
	}

	return resolver.UpdateUser(ctx, username, email, password, profileImg, profileMessage, status, rank, ageInt32)
}

// DeleteUser is the resolver for the deleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context) (bool, error) {
	return resolver.DeleteUser(ctx)
}

// AdjustRep is the resolver for the adjustRep field.
func (r *mutationResolver) AdjustRep(ctx context.Context, userID uuid.UUID, amount int32) (bool, error) {
	return resolver.AdjustRep(ctx, userID, int(amount))
}

// UpdatePreference is the resolver for the updatePreference field.
func (r *mutationResolver) UpdatePreference(ctx context.Context, region *string, playstyle *model.Playstyle, favoritePlatform *model.Platform, favoriteGameGenre *model.GameGenre) (*model.User, error) {
	return resolver.UpdatePreference(ctx, region, playstyle, favoritePlatform, favoriteGameGenre)
}

// FollowGame is the resolver for the followGame field.
func (r *mutationResolver) FollowGame(ctx context.Context, slug string) (bool, error) {
	return resolver.FollowGame(ctx, slug)
}

// UnfollowGame is the resolver for the unfollowGame field.
func (r *mutationResolver) UnfollowGame(ctx context.Context, slug string) (bool, error) {
	return resolver.UnfollowGame(ctx, slug)
}

// Profile is the resolver for the profile field.
func (r *queryResolver) Profile(ctx context.Context) (*model.User, error) {
	return resolver.Profile(ctx)
}

// GetUser is the resolver for the getUser field.
func (r *queryResolver) GetUser(ctx context.Context, userID uuid.UUID) (*model.User, error) {
	panic(fmt.Errorf("not implemented: GetUser - getUser"))
}

// GetRandomUsers is the resolver for the getRandomUsers field.
func (r *queryResolver) GetRandomUsers(ctx context.Context) ([]*model.User, error) {
	panic(fmt.Errorf("not implemented: GetRandomUsers - getRandomUsers"))
}

// GetRecommendations is the resolver for the getRecommendations field.
func (r *queryResolver) GetRecommendations(ctx context.Context, userID uuid.UUID, numRecommendations int32) ([]*model.UserRecommendation, error) {
	panic(fmt.Errorf("not implemented: GetRecommendations - getRecommendations"))
}

// GetRecommendations is the resolver for the getRecommendations field.
func (r *queryResolver) GetRecommendations(ctx context.Context, userID uuid.UUID, numRecommendations int32) ([]*model.UserRecommendation, error) {
	return resolver.GetRecommendations(ctx, userID, int(numRecommendations))
}

// SearchUser is the resolver for the searchUser field.
func (r *queryResolver) SearchUser(ctx context.Context, search string) ([]*model.User, error) {
	return resolver.SearchUser(ctx, search)
}

// GetUserFollowedGames is the resolver for the getUserFollowedGames field.
func (r *queryResolver) GetUserFollowedGames(ctx context.Context, userID uuid.UUID) ([]*model.Game, error) {
	return resolver.GetUserFollowedGames(ctx, userID)
}

// IsUserFollowingGame is the resolver for the isUserFollowingGame field.
func (r *queryResolver) IsUserFollowingGame(ctx context.Context, userID uuid.UUID, gameID uuid.UUID) (bool, error) {
	return resolver.IsUserFollowingGame(ctx, userID, gameID)
}
